<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Jov Mit</title>
    <link>https://jovmit.io/tags/android/</link>
    <description>Recent content in Android on Jov Mit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Aug 2023 00:26:55 +0200</lastBuildDate><atom:link href="https://jovmit.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing Screenshot Tests with Paparazzi</title>
      <link>https://jovmit.io/posts/paparazzi/</link>
      <pubDate>Mon, 14 Aug 2023 00:26:55 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/paparazzi/</guid>
      <description>Introduction Screenshot testing is one of the most powerful ways to make sure your UI remains looking the same over time. With screenshot testing, we aren&amp;rsquo;t only checking if the UI elements are present on the screen, but also if they are positioned well, and if they look as they should.
What&amp;rsquo;s good about the Screenshot testing lately is that it gets fast, stable and reliable way to test UI. In terms of Android, a bunch of frameworks are available lately, and one of them is Paparazzi</description>
    </item>
    
    <item>
      <title>Setting up Koin for Android UI testing</title>
      <link>https://jovmit.io/posts/koin-setup-android/</link>
      <pubDate>Sat, 14 Dec 2019 09:11:33 +0100</pubDate>
      
      <guid>https://jovmit.io/posts/koin-setup-android/</guid>
      <description>Problem definition Recently I&amp;rsquo;ve come to a problem running my UI tests because of a DefinitionOverrideException. That&amp;rsquo;s an exception thrown by the Koin library when we have a duplicated definition for a particular type. The way we use Koin on Android is by starting the container in the onCreate() method of the Application class and loading the relevant modules into the container. Here is how it may look like:</description>
    </item>
    
    <item>
      <title>Android KTX</title>
      <link>https://jovmit.io/posts/android-ktx/</link>
      <pubDate>Fri, 29 Jun 2018 10:25:45 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/android-ktx/</guid>
      <description>Intro Android KTX is an open source library or set of functionalities designed to make the Android development with Kotlin even more pleasant. The abbreviation KTX stands for Kotlin Extensions, so this library is basically a set of extension functions, extension properties and other top-level functions. In this article, we take a look at what&amp;rsquo;s inside this library and how we can take advantage of it. This library&amp;rsquo;s goal is not to add new features to the existing Android APIs, but rather make those APIs easier to use by leveraging the features of the Kotlin language.</description>
    </item>
    
    <item>
      <title>Android Navigation Arch Component</title>
      <link>https://jovmit.io/posts/android-arch-navigation/</link>
      <pubDate>Wed, 23 May 2018 07:19:26 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/android-arch-navigation/</guid>
      <description>About On the Google IO 2018 event, there was an announcement of JetPack — a set of libraries to help and boost the Android development. These libraries are bringing the development of the essential parts of an application to a completely new level. By essential parts I mean things like handling configuration change, persisting data, executing operations in the background and so on. Some of those libraries were announced at Google IO 2017, and by now are having a stable release, and some of them are completely new.</description>
    </item>
    
    <item>
      <title>Testing Android UI with pleasure</title>
      <link>https://jovmit.io/posts/android-testing-ui/</link>
      <pubDate>Sun, 28 Jan 2018 07:19:48 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/android-testing-ui/</guid>
      <description>Intro Although it should be very clear by now, testing is a very important part of the software development. Tests are, in a way, a construction around the software, which provides confidence for altering its structure (mostly to improve it) while being sure the behaviour stays the same.
This article is focused mainly on the UI tests in an Android application. Traditionally, testing the UI was done by running a mocked backend on the same machine where the device/emulator is exercising the UI tests.</description>
    </item>
    
    <item>
      <title>Add offline support using Room</title>
      <link>https://jovmit.io/posts/android-offline-support-room/</link>
      <pubDate>Thu, 23 Nov 2017 07:20:04 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/android-offline-support-room/</guid>
      <description>Recently, Google has announced the stable version of the architecture components, which arguably were quite stable before getting to 1.0.0. This library contains 4 parts: ViewModel, LiveData, Room, and the Paging Library. This parts work great together because as one may assume — they are designed to do so. The architecture components could drastically influence and change the traditional way of developing Android apps, so they are potential game changer. This article is focused on the Room part of the architecture components, used for data persistence in order to enable the offline support of an app.</description>
    </item>
    
    <item>
      <title>Android notifications — An elegant way to build and display</title>
      <link>https://jovmit.io/posts/android-notifications/</link>
      <pubDate>Sat, 26 Aug 2017 07:20:21 +0200</pubDate>
      
      <guid>https://jovmit.io/posts/android-notifications/</guid>
      <description>Almost all of the Android apps I’ve been working on were commercial apps, and almost all of them are using the push notifications capabilities. Push notifications are a nice way to keep your users engaged, and from the business perspective, taking the advantages they provide is crucial. Of course, there are situations when push notifications doesn’t apply or make sense, but we’re not gonna talk about that now.
Displaying notifications on Android is fairly easy.</description>
    </item>
    
  </channel>
</rss>
